/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UI;

import java.awt.Color;
import javax.swing.ImageIcon;

/**
 *
 * @author dhiys
 */
public class BattleScreen extends javax.swing.JFrame {

    /**
     * Creates new form BattleScreen
     */
    public BattleScreen() {

        //IF URL IS THIS THEN DISPLAY THIS CERTAIN ENEMY CHARACTER
        initComponents();
        skillPtsBar.setValue(100);
        BACKEND.BattleController.generateRandEnemy();

        ImageIcon image = new ImageIcon(BACKEND.BattleController.getEnemyUrl());
        enemyImageLabel.setIcon(image);

        physDmgLab.setText("Dice cost for phys atk: " + BACKEND.ViewingManager.returnCharacter(0).getPhysCost());
        skillDmgLab.setText("Dice cost for skill atk: " + BACKEND.ViewingManager.returnCharacter(0).getSkillCost());
        burstDmgLab.setText("Dice cost for burst atk: " + BACKEND.ViewingManager.returnCharacter(0).getBurstCost());

        physAtkBut.setVisible(false);
        skillAtkBut.setVisible(false);
        burstAtkBut.setVisible(false);

        usernameLab.setText(BACKEND.LoginManager.getUser());
        enemyHPLab.setText("" + BACKEND.BattleController.getActiveEnemy().getHealth());
        char1HP.setText("" + BACKEND.ViewingManager.returnCharacter(0).getHp());
        char2HP.setText("" + BACKEND.ViewingManager.returnCharacter(1).getHp());
        char3HP.setText("" + BACKEND.ViewingManager.returnCharacter(2).getHp());

        char1But.setText(BACKEND.ViewingManager.returnCharacter(0).getName());
        char2But.setText(BACKEND.ViewingManager.returnCharacter(1).getName());
        char3But.setText(BACKEND.ViewingManager.returnCharacter(2).getName());
        
        char1But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.ViewingManager.returnCharacter(char1But.getText()).getElementType()));
        char2But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.ViewingManager.returnCharacter(char2But.getText()).getElementType()));
        char3But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.ViewingManager.returnCharacter(char3But.getText()).getElementType()));

        dice1But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(0)));
        dice2But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(1)));
        dice3But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(2)));
        dice4but.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(3)));
        dice5But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(4)));
        dice6But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(5)));
        dice7But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(6)));
        dice8But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(7)));

        card1RadB.setText(BACKEND.DiceAndHandManager.returnCardInHand(0).getName());
        card2RadB.setText(BACKEND.DiceAndHandManager.returnCardInHand(1).getName());
        card3RadB.setText(BACKEND.DiceAndHandManager.returnCardInHand(2).getName());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        usernameLab = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        endRoundBut = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        enemyImageLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        turnLab = new javax.swing.JLabel();
        char3HP = new javax.swing.JLabel();
        char1HP = new javax.swing.JLabel();
        char2HP = new javax.swing.JLabel();
        char3But = new javax.swing.JButton();
        char1But = new javax.swing.JButton();
        char2But = new javax.swing.JButton();
        enemyHPLab = new javax.swing.JLabel();
        playSpecialCardBut = new javax.swing.JButton();
        physAtkBut = new javax.swing.JButton();
        skillAtkBut = new javax.swing.JButton();
        burstAtkBut = new javax.swing.JButton();
        dice4but = new javax.swing.JButton();
        dice1But = new javax.swing.JButton();
        dice2But = new javax.swing.JButton();
        dice3But = new javax.swing.JButton();
        dice8But = new javax.swing.JButton();
        dice7But = new javax.swing.JButton();
        dice6But = new javax.swing.JButton();
        dice5But = new javax.swing.JButton();
        errorLabel = new javax.swing.JLabel();
        card3RadB = new javax.swing.JRadioButton();
        card1RadB = new javax.swing.JRadioButton();
        card2RadB = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        forfeitGameBut = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        skillPtsBar = new javax.swing.JProgressBar();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        burstDmgLab = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        dmgDone = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        physDmgLab = new javax.swing.JLabel();
        skillDmgLab = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1490, 800));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(20, 19, 18));
        jPanel1.setMinimumSize(new java.awt.Dimension(1490, 800));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        usernameLab.setBackground(new java.awt.Color(109, 161, 213));
        usernameLab.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        usernameLab.setForeground(new java.awt.Color(215, 148, 203));
        usernameLab.setText("User");
        jPanel1.add(usernameLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 720, 140, 50));

        jLabel3.setBackground(new java.awt.Color(109, 161, 213));
        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(215, 148, 203));
        jLabel3.setText("Enemy");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        endRoundBut.setBackground(new java.awt.Color(65, 49, 65));
        endRoundBut.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        endRoundBut.setForeground(new java.awt.Color(228, 217, 226));
        endRoundBut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/hourglasspng.png"))); // NOI18N
        endRoundBut.setBorder(null);
        endRoundBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endRoundButActionPerformed(evt);
            }
        });
        jPanel1.add(endRoundBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 360, 90, 90));

        jLabel8.setBackground(new java.awt.Color(109, 161, 213));
        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(215, 148, 203));
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/fatuiEmblem.png"))); // NOI18N
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 90, 90));

        enemyImageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/mirrorMaiden.png"))); // NOI18N
        jPanel1.add(enemyImageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 60, 480, 250));

        jLabel7.setBackground(new java.awt.Color(109, 161, 213));
        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(215, 148, 203));
        jLabel7.setText("Dice");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(1360, 170, -1, -1));

        turnLab.setBackground(new java.awt.Color(109, 161, 213));
        turnLab.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        turnLab.setForeground(new java.awt.Color(215, 148, 203));
        turnLab.setText("Your turn");
        jPanel1.add(turnLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 300, -1, -1));

        char3HP.setBackground(new java.awt.Color(26, 23, 25));
        char3HP.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        char3HP.setForeground(new java.awt.Color(215, 148, 203));
        char3HP.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        char3HP.setFocusable(false);
        char3HP.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        char3HP.setOpaque(true);
        jPanel1.add(char3HP, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 390, 50, 50));

        char1HP.setBackground(new java.awt.Color(26, 23, 25));
        char1HP.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        char1HP.setForeground(new java.awt.Color(215, 148, 203));
        char1HP.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        char1HP.setFocusable(false);
        char1HP.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        char1HP.setOpaque(true);
        jPanel1.add(char1HP, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 400, 50, 50));

        char2HP.setBackground(new java.awt.Color(26, 23, 25));
        char2HP.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        char2HP.setForeground(new java.awt.Color(215, 148, 203));
        char2HP.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        char2HP.setFocusable(false);
        char2HP.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        char2HP.setOpaque(true);
        jPanel1.add(char2HP, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 390, 50, 50));

        char3But.setBackground(new java.awt.Color(26, 23, 25));
        char3But.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        char3But.setForeground(new java.awt.Color(0, 0, 0));
        char3But.setBorder(null);
        char3But.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        char3But.setOpaque(true);
        char3But.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                char3ButActionPerformed(evt);
            }
        });
        jPanel1.add(char3But, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 420, 210, 210));

        char1But.setBackground(new java.awt.Color(26, 23, 25));
        char1But.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        char1But.setForeground(new java.awt.Color(0, 0, 0));
        char1But.setBorder(null);
        char1But.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        char1But.setOpaque(true);
        char1But.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                char1ButActionPerformed(evt);
            }
        });
        jPanel1.add(char1But, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 420, 210, 210));

        char2But.setBackground(new java.awt.Color(26, 23, 25));
        char2But.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        char2But.setForeground(new java.awt.Color(0, 0, 0));
        char2But.setBorder(null);
        char2But.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        char2But.setOpaque(true);
        char2But.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                char2ButActionPerformed(evt);
            }
        });
        jPanel1.add(char2But, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 420, 210, 210));

        enemyHPLab.setBackground(new java.awt.Color(26, 23, 25));
        enemyHPLab.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        enemyHPLab.setForeground(new java.awt.Color(215, 148, 203));
        enemyHPLab.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        enemyHPLab.setFocusable(false);
        enemyHPLab.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        enemyHPLab.setOpaque(true);
        jPanel1.add(enemyHPLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 60, 80, 80));

        playSpecialCardBut.setBackground(new java.awt.Color(109, 49, 89));
        playSpecialCardBut.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        playSpecialCardBut.setForeground(new java.awt.Color(228, 217, 226));
        playSpecialCardBut.setText("Play this card");
        playSpecialCardBut.setBorder(null);
        playSpecialCardBut.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        playSpecialCardBut.setOpaque(true);
        playSpecialCardBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playSpecialCardButActionPerformed(evt);
            }
        });
        jPanel1.add(playSpecialCardBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 620, 150, 40));

        physAtkBut.setBackground(new java.awt.Color(109, 49, 89));
        physAtkBut.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        physAtkBut.setForeground(new java.awt.Color(228, 217, 226));
        physAtkBut.setBorder(null);
        physAtkBut.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        physAtkBut.setOpaque(true);
        physAtkBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                physAtkButActionPerformed(evt);
            }
        });
        jPanel1.add(physAtkBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 680, 210, 80));

        skillAtkBut.setBackground(new java.awt.Color(109, 49, 89));
        skillAtkBut.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        skillAtkBut.setForeground(new java.awt.Color(228, 217, 226));
        skillAtkBut.setBorder(null);
        skillAtkBut.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        skillAtkBut.setOpaque(true);
        skillAtkBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skillAtkButActionPerformed(evt);
            }
        });
        jPanel1.add(skillAtkBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 680, 210, 80));

        burstAtkBut.setBackground(new java.awt.Color(109, 49, 89));
        burstAtkBut.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        burstAtkBut.setForeground(new java.awt.Color(228, 217, 226));
        burstAtkBut.setBorder(null);
        burstAtkBut.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        burstAtkBut.setOpaque(true);
        burstAtkBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                burstAtkButActionPerformed(evt);
            }
        });
        jPanel1.add(burstAtkBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 680, 210, 80));

        dice4but.setBackground(new java.awt.Color(26, 23, 25));
        dice4but.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        dice4but.setForeground(new java.awt.Color(228, 217, 226));
        dice4but.setBorder(null);
        dice4but.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        dice4but.setOpaque(true);
        dice4but.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dice4butActionPerformed(evt);
            }
        });
        jPanel1.add(dice4but, new org.netbeans.lib.awtextra.AbsoluteConstraints(1300, 420, 60, 60));

        dice1But.setBackground(new java.awt.Color(26, 23, 25));
        dice1But.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        dice1But.setForeground(new java.awt.Color(228, 217, 226));
        dice1But.setBorder(null);
        dice1But.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        dice1But.setOpaque(true);
        dice1But.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dice1ButActionPerformed(evt);
            }
        });
        jPanel1.add(dice1But, new org.netbeans.lib.awtextra.AbsoluteConstraints(1300, 210, 60, 60));

        dice2But.setBackground(new java.awt.Color(26, 23, 25));
        dice2But.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        dice2But.setForeground(new java.awt.Color(228, 217, 226));
        dice2But.setBorder(null);
        dice2But.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        dice2But.setOpaque(true);
        dice2But.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dice2ButActionPerformed(evt);
            }
        });
        jPanel1.add(dice2But, new org.netbeans.lib.awtextra.AbsoluteConstraints(1300, 280, 60, 60));

        dice3But.setBackground(new java.awt.Color(26, 23, 25));
        dice3But.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        dice3But.setForeground(new java.awt.Color(228, 217, 226));
        dice3But.setBorder(null);
        dice3But.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        dice3But.setOpaque(true);
        dice3But.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dice3ButActionPerformed(evt);
            }
        });
        jPanel1.add(dice3But, new org.netbeans.lib.awtextra.AbsoluteConstraints(1300, 350, 60, 60));

        dice8But.setBackground(new java.awt.Color(26, 23, 25));
        dice8But.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        dice8But.setForeground(new java.awt.Color(228, 217, 226));
        dice8But.setBorder(null);
        dice8But.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        dice8But.setOpaque(true);
        dice8But.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dice8ButActionPerformed(evt);
            }
        });
        jPanel1.add(dice8But, new org.netbeans.lib.awtextra.AbsoluteConstraints(1390, 420, 60, 60));

        dice7But.setBackground(new java.awt.Color(26, 23, 25));
        dice7But.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        dice7But.setForeground(new java.awt.Color(228, 217, 226));
        dice7But.setBorder(null);
        dice7But.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        dice7But.setOpaque(true);
        dice7But.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dice7ButActionPerformed(evt);
            }
        });
        jPanel1.add(dice7But, new org.netbeans.lib.awtextra.AbsoluteConstraints(1390, 350, 60, 60));

        dice6But.setBackground(new java.awt.Color(26, 23, 25));
        dice6But.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        dice6But.setForeground(new java.awt.Color(228, 217, 226));
        dice6But.setBorder(null);
        dice6But.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        dice6But.setOpaque(true);
        dice6But.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dice6ButActionPerformed(evt);
            }
        });
        jPanel1.add(dice6But, new org.netbeans.lib.awtextra.AbsoluteConstraints(1390, 280, 60, 60));

        dice5But.setBackground(new java.awt.Color(26, 23, 25));
        dice5But.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        dice5But.setForeground(new java.awt.Color(228, 217, 226));
        dice5But.setBorder(null);
        dice5But.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        dice5But.setOpaque(true);
        dice5But.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dice5ButActionPerformed(evt);
            }
        });
        jPanel1.add(dice5But, new org.netbeans.lib.awtextra.AbsoluteConstraints(1390, 210, 60, 60));

        errorLabel.setBackground(new java.awt.Color(109, 161, 213));
        errorLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        errorLabel.setForeground(new java.awt.Color(215, 148, 203));
        jPanel1.add(errorLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 670, 260, 30));

        buttonGroup1.add(card3RadB);
        card3RadB.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        card3RadB.setForeground(new java.awt.Color(228, 217, 226));
        jPanel1.add(card3RadB, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 580, -1, -1));

        buttonGroup1.add(card1RadB);
        card1RadB.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        card1RadB.setForeground(new java.awt.Color(228, 217, 226));
        card1RadB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card1RadBActionPerformed(evt);
            }
        });
        jPanel1.add(card1RadB, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 500, -1, -1));

        buttonGroup1.add(card2RadB);
        card2RadB.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        card2RadB.setForeground(new java.awt.Color(228, 217, 226));
        jPanel1.add(card2RadB, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 540, -1, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("FORFEIT");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(1350, 30, 100, 100));

        forfeitGameBut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/90x90button.png"))); // NOI18N
        forfeitGameBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forfeitGameButActionPerformed(evt);
            }
        });
        jPanel1.add(forfeitGameBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(1350, 30, 100, 100));

        jLabel12.setBackground(new java.awt.Color(109, 161, 213));
        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(215, 148, 203));
        jLabel12.setText("End Round");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 450, -1, -1));

        skillPtsBar.setBackground(new java.awt.Color(26, 23, 25));
        skillPtsBar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        skillPtsBar.setForeground(new java.awt.Color(228, 217, 226));
        skillPtsBar.setMinimum(5);
        jPanel1.add(skillPtsBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 70, 210, 60));

        jLabel4.setBackground(new java.awt.Color(109, 161, 213));
        jLabel4.setForeground(new java.awt.Color(228, 217, 226));
        jLabel4.setText("end of the round will decrease.");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 180, 240, 20));

        jLabel5.setBackground(new java.awt.Color(109, 161, 213));
        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(215, 148, 203));
        jLabel5.setText("HP");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 90, -1, -1));

        burstDmgLab.setBackground(new java.awt.Color(109, 161, 213));
        burstDmgLab.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        burstDmgLab.setForeground(new java.awt.Color(228, 217, 226));
        burstDmgLab.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jPanel1.add(burstDmgLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 620, 260, 50));

        jLabel9.setBackground(new java.awt.Color(109, 161, 213));
        jLabel9.setForeground(new java.awt.Color(228, 217, 226));
        jLabel9.setText("the amount of skill points you earn at the ");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 160, 240, 20));

        dmgDone.setBackground(new java.awt.Color(26, 23, 25));
        dmgDone.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        dmgDone.setForeground(new java.awt.Color(215, 148, 203));
        dmgDone.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dmgDone.setFocusable(false);
        dmgDone.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        dmgDone.setOpaque(true);
        jPanel1.add(dmgDone, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 160, 80, 80));

        jLabel10.setBackground(new java.awt.Color(109, 161, 213));
        jLabel10.setForeground(new java.awt.Color(228, 217, 226));
        jLabel10.setText("*Although using special cards cost no dice,");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 140, 240, 20));

        physDmgLab.setBackground(new java.awt.Color(109, 161, 213));
        physDmgLab.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        physDmgLab.setForeground(new java.awt.Color(228, 217, 226));
        physDmgLab.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jPanel1.add(physDmgLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 540, 260, 50));

        skillDmgLab.setBackground(new java.awt.Color(109, 161, 213));
        skillDmgLab.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        skillDmgLab.setForeground(new java.awt.Color(228, 217, 226));
        skillDmgLab.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jPanel1.add(skillDmgLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 580, 280, 50));

        jLabel11.setBackground(new java.awt.Color(109, 161, 213));
        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(215, 148, 203));
        jLabel11.setText("Prev Atk Dmg");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 190, -1, -1));

        jLabel13.setBackground(new java.awt.Color(109, 161, 213));
        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(215, 148, 203));
        jLabel13.setText("Skill Points");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 30, -1, -1));

        jLabel14.setBackground(new java.awt.Color(109, 161, 213));
        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(215, 148, 203));
        jLabel14.setText("VS");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 320, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1490, 800));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void endRoundButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endRoundButActionPerformed
        // TODO add your handling code here:

        BACKEND.SpecialCardsEffects.resetDiceCost();
        physDmgLab.setText("Dice cost for phys atk: " + BACKEND.ViewingManager.returnCharacter(0).getPhysCost());
        skillDmgLab.setText("Dice cost for skill atk: " + BACKEND.ViewingManager.returnCharacter(0).getSkillCost());
        burstDmgLab.setText("Dice cost for burst atk: " + BACKEND.ViewingManager.returnCharacter(0).getBurstCost());

        BACKEND.StatsManager.sumPtsInRound(skillPtsBar.getValue(), BACKEND.LoginManager.getUser());
        BACKEND.StatsManager.sumPtsInRound(-15, BACKEND.LoginManager.getUser());

        skillPtsBar.setValue(100);
        playSpecialCardBut.setEnabled(true);
        physAtkBut.setVisible(false);
        skillAtkBut.setVisible(false);
        burstAtkBut.setVisible(false);

        BACKEND.DiceAndHandManager.clearHand();
        BACKEND.DiceAndHandManager.addSpecialCards(6, 1, 3);
        while (BACKEND.DiceAndHandManager.cardHandHasDupe()) {
            BACKEND.DiceAndHandManager.clearHand();
            BACKEND.DiceAndHandManager.addSpecialCards(6, 1, 3);
        }
        BACKEND.DiceAndHandManager.clearDice();
        BACKEND.DiceAndHandManager.clearPosToReroll();
        BACKEND.DiceAndHandManager.addDice();
        BACKEND.DiceAndHandManager.sort();

        dice1But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(0)));
        dice2But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(1)));
        dice3But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(2)));
        dice4but.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(3)));
        dice5But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(4)));
        dice6But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(5)));
        dice7But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(6)));
        dice8But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(7)));

        card1RadB.setText(BACKEND.DiceAndHandManager.returnCardInHand(0).getName());
        card2RadB.setText(BACKEND.DiceAndHandManager.returnCardInHand(1).getName());
        card3RadB.setText(BACKEND.DiceAndHandManager.returnCardInHand(2).getName());
        card1RadB.setVisible(true);
        card2RadB.setVisible(true);
        card3RadB.setVisible(true);
    }//GEN-LAST:event_endRoundButActionPerformed

    private void char3ButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_char3ButActionPerformed
        // TODO add your handling code here:
        BACKEND.BattleController.setActiveChar(BACKEND.ViewingManager.returnCharacter(char3But.getText()));
        char3But.setBackground(new Color(109, 49, 89));
        char3HP.setBackground(new Color(109, 49, 89));

        char2But.setBackground(new Color(26, 23, 25));
        char2HP.setBackground(new Color(26, 23, 25));
        char1But.setBackground(new Color(26, 23, 25));
        char1HP.setBackground(new Color(26, 23, 25));

        physAtkBut.setVisible(true);
        physAtkBut.setText("Phys ATK : " + BACKEND.ViewingManager.returnCharacter(2).getPhysDmg());
        skillAtkBut.setVisible(true);
        skillAtkBut.setText("Skill ATK : " + BACKEND.ViewingManager.returnCharacter(2).getSkillDmg());
        burstAtkBut.setVisible(true);
        burstAtkBut.setText("Burst ATK : " + BACKEND.ViewingManager.returnCharacter(2).getBurstDmg());

    }//GEN-LAST:event_char3ButActionPerformed

    private void char2ButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_char2ButActionPerformed
        // TODO add your handling code here:
        BACKEND.BattleController.setActiveChar(BACKEND.ViewingManager.returnCharacter(char2But.getText()));
        char2But.setBackground(new Color(109, 49, 89));
        char2HP.setBackground(new Color(109, 49, 89));

        char1But.setBackground(new Color(26, 23, 25));
        char1HP.setBackground(new Color(26, 23, 25));
        char3But.setBackground(new Color(26, 23, 25));
        char3HP.setBackground(new Color(26, 23, 25));

        physAtkBut.setVisible(true);
        physAtkBut.setText("Phys ATK : " + BACKEND.ViewingManager.returnCharacter(1).getPhysDmg());
        skillAtkBut.setVisible(true);
        skillAtkBut.setText("Skill ATK : " + BACKEND.ViewingManager.returnCharacter(1).getSkillDmg());
        burstAtkBut.setVisible(true);
        burstAtkBut.setText("Burst ATK : " + BACKEND.ViewingManager.returnCharacter(1).getBurstDmg());
    }//GEN-LAST:event_char2ButActionPerformed

    private void playSpecialCardButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playSpecialCardButActionPerformed
        // TODO add your handling code here:

        boolean canPlay = true;
        String specialCardSelected = "";
        if (card1RadB.isSelected()) {
            specialCardSelected = card1RadB.getText();
            card1RadB.setVisible(false);

        } else if (card2RadB.isSelected()) {
            specialCardSelected = card2RadB.getText();
            card2RadB.setVisible(false);

        } else if (card3RadB.isSelected()) {
            specialCardSelected = card3RadB.getText();
            card3RadB.setVisible(false);

        } else {
            errorLabel.setText("No card selected.");
            canPlay = false;
        }

        if (BACKEND.DiceAndHandManager.getDiceSize() > 0 && canPlay) {
            errorLabel.setText("");
            int currentSkillPts = skillPtsBar.getValue();
            skillPtsBar.setValue(currentSkillPts - 10);
            BACKEND.BattleController.playCard(specialCardSelected);
            physAtkBut.setVisible(false);
            skillAtkBut.setVisible(false);
            burstAtkBut.setVisible(false);
            //special cases (need ui update or anything)
            if (specialCardSelected.contains("Heal")) {
                char1HP.setText("" + BACKEND.ViewingManager.returnCharacter(0).getHp());
                char2HP.setText("" + BACKEND.ViewingManager.returnCharacter(1).getHp());
                char3HP.setText("" + BACKEND.ViewingManager.returnCharacter(2).getHp());
            }
            if (specialCardSelected.contains("Increase")) {
                physAtkBut.setText("Phys ATK : " + BACKEND.ViewingManager.returnCharacter(0).getPhysDmg());
                skillAtkBut.setText("Skill ATK : " + BACKEND.ViewingManager.returnCharacter(0).getSkillDmg());
                burstAtkBut.setText("Burst ATK : " + BACKEND.ViewingManager.returnCharacter(0).getBurstDmg());

            }

            if (specialCardSelected.equals("One Less Dice")) {
                physDmgLab.setText("Dice cost for phys atk: " + BACKEND.ViewingManager.returnCharacter(0).getPhysCost());
                skillDmgLab.setText("Dice cost for skill atk: " + BACKEND.ViewingManager.returnCharacter(0).getSkillCost());
                burstDmgLab.setText("Dice cost for burst atk: " + BACKEND.ViewingManager.returnCharacter(0).getBurstCost());

                System.out.println("phys: " + BACKEND.ViewingManager.returnCharacter(0).getPhysCost());
                System.out.println("skill: " + BACKEND.ViewingManager.returnCharacter(0).getSkillCost());
                System.out.println("burst: " + BACKEND.ViewingManager.returnCharacter(0).getBurstCost());
            }
            if (specialCardSelected.equals("Deal 3 Damage For Free")) {
                enemyHPLab.setText("" + BACKEND.BattleController.getActiveEnemy().getHealth());
            }
            //dec skillpoitns
            BACKEND.BattleController.doEnemyTurn();
            if (BACKEND.BattleController.isDead()) {

                String deadChar = BACKEND.BattleController.getEnemyTarget();
                if (char1But.getText().equals(deadChar)) {
                    char1But.setBackground(Color.black);
                    char1But.setEnabled(false);
                    char1HP.setText("X");
                } else if (char2But.getText().equals(deadChar)) {
                    char2But.setBackground(Color.black);
                    char1But.setEnabled(false);
                    char2HP.setText("X");
                } else {
                    char3But.setBackground(Color.black);
                    char3But.setEnabled(false);
                    char3HP.setText("X");
                }
                //no more attacks
                playSpecialCardBut.setVisible(false);
                physAtkBut.setVisible(false);
                skillAtkBut.setVisible(false);
                burstAtkBut.setVisible(false);
                endRoundBut.setVisible(false);
                //go to next screen

            } else if (BACKEND.BattleController.getActiveEnemy().getHealth() <= 0) {
                this.setVisible(false);
                VictoryScreen vs = new VictoryScreen();
                vs.setVisible(true);
            } else {
                BACKEND.StatsManager.incNumMoves();
                char1HP.setText("" + BACKEND.ViewingManager.returnCharacter(0).getHp());
                char2HP.setText("" + BACKEND.ViewingManager.returnCharacter(1).getHp());
                char3HP.setText("" + BACKEND.ViewingManager.returnCharacter(2).getHp());
                dmgDone.setText("" + BACKEND.BattleController.getEnemyDmg());
            }
        }

    }//GEN-LAST:event_playSpecialCardButActionPerformed

    private void physAtkButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_physAtkButActionPerformed
        // TODO add your handling code here:
        //perform checks: if enough dice DONE
        //minus 2 dice from side DONE
        //subtract enemy health DONE
        //stats controller: add 3 points
        //set enemy label their health DONE
        BACKEND.DiceAndHandManager.countElements();
        if (BACKEND.BattleController.hasEnoughDice(BACKEND.BattleController.getActiveChar().getPhysCost(), BACKEND.BattleController.getActiveChar().getElementType())) {
            System.out.println("has enough dice for phys");
            BACKEND.BattleController.subtractDice(BACKEND.BattleController.getActiveChar().getPhysCost(), BACKEND.BattleController.getActiveChar().getElementType());
            System.out.println("phys cost for this char: " + BACKEND.BattleController.getActiveChar().getPhysCost());
            BACKEND.BattleController.setEnemyHealth(BACKEND.BattleController.getActiveEnemy().getHealth() - (BACKEND.BattleController.getActiveChar().getPhysDmg()));
            enemyHPLab.setText("" + BACKEND.BattleController.getActiveEnemy().getHealth());

            //recolour the dice
            BACKEND.DiceAndHandManager.sort();
            dice1But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(0)));
            dice2But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(1)));
            dice3But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(2)));
            dice4but.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(3)));
            dice5But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(4)));
            dice6But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(5)));
            dice7But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(6)));
            dice8But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(7)));
            BACKEND.BattleController.doEnemyTurn();
            if (BACKEND.BattleController.isDead()) {

                String deadChar = BACKEND.BattleController.getEnemyTarget();
                if (char1But.getText().equals(deadChar)) {
                    char1But.setBackground(Color.black);
                    char1But.setEnabled(false);
                    char1HP.setText("X");
                } else if (char2But.getText().equals(deadChar)) {
                    char2But.setBackground(Color.black);
                    char1But.setEnabled(false);
                    char2HP.setText("X");
                } else {
                    char3But.setBackground(Color.black);
                    char3But.setEnabled(false);
                    char3HP.setText("X");
                }
                //no more attacks

                playSpecialCardBut.setVisible(false);
                physAtkBut.setVisible(false);
                skillAtkBut.setVisible(false);
                burstAtkBut.setVisible(false);
                endRoundBut.setVisible(false);
                //go to next screen

            } else if (BACKEND.BattleController.getActiveEnemy().getHealth() <= 0) {
                this.setVisible(false);
                VictoryScreen vs = new VictoryScreen();
                vs.setVisible(true);
            } else {
                BACKEND.StatsManager.incNumMoves();
                char1HP.setText("" + BACKEND.ViewingManager.returnCharacter(0).getHp());
                char2HP.setText("" + BACKEND.ViewingManager.returnCharacter(1).getHp());
                char3HP.setText("" + BACKEND.ViewingManager.returnCharacter(2).getHp());
                dmgDone.setText("" + BACKEND.BattleController.getEnemyDmg());
            }
        }

    }//GEN-LAST:event_physAtkButActionPerformed

    private void skillAtkButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skillAtkButActionPerformed
        // TODO add your handling code here:
        BACKEND.DiceAndHandManager.countElements();
        if (BACKEND.BattleController.hasEnoughDice(BACKEND.BattleController.getActiveChar().getSkillCost(), BACKEND.BattleController.getActiveChar().getElementType())) {
            System.out.println("has enough dice for skill");
            BACKEND.BattleController.subtractDice(BACKEND.BattleController.getActiveChar().getSkillCost(), BACKEND.BattleController.getActiveChar().getElementType());
            System.out.println("skill cost for this char: " + BACKEND.BattleController.getActiveChar().getSkillCost());
            BACKEND.BattleController.setEnemyHealth(BACKEND.BattleController.getActiveEnemy().getHealth() - (BACKEND.BattleController.getActiveChar().getSkillDmg()));
            enemyHPLab.setText("" + BACKEND.BattleController.getActiveEnemy().getHealth());

            BACKEND.DiceAndHandManager.sort();
            dice1But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(0)));
            dice2But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(1)));
            dice3But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(2)));
            dice4but.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(3)));
            dice5But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(4)));
            dice6But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(5)));
            dice7But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(6)));
            dice8But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(7)));

            BACKEND.BattleController.doEnemyTurn();

            if (BACKEND.BattleController.isDead()) {
                String deadChar = BACKEND.BattleController.getEnemyTarget();
                if (char1But.getText().equals(deadChar)) {
                    char1But.setBackground(Color.black);
                    char1But.setEnabled(false);
                    char1HP.setText("X");
                } else if (char2But.getText().equals(deadChar)) {
                    char2But.setBackground(Color.black);
                    char1But.setEnabled(false);
                    char2HP.setText("X");
                } else {
                    char3But.setBackground(Color.black);
                    char3But.setEnabled(false);
                    char3HP.setText("X");
                }
                //no more attacks

                playSpecialCardBut.setVisible(false);
                physAtkBut.setVisible(false);
                skillAtkBut.setVisible(false);
                burstAtkBut.setVisible(false);
                endRoundBut.setVisible(false);
                //go to next screen

            } else if (BACKEND.BattleController.getActiveEnemy().getHealth() <= 0) {
                this.setVisible(false);
                VictoryScreen vs = new VictoryScreen();
                vs.setVisible(true);
            } else {
                BACKEND.StatsManager.incNumMoves();
                char1HP.setText("" + BACKEND.ViewingManager.returnCharacter(0).getHp());
                char2HP.setText("" + BACKEND.ViewingManager.returnCharacter(1).getHp());
                char3HP.setText("" + BACKEND.ViewingManager.returnCharacter(2).getHp());
                dmgDone.setText("" + BACKEND.BattleController.getEnemyDmg());
            }
        }

    }//GEN-LAST:event_skillAtkButActionPerformed

    private void burstAtkButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_burstAtkButActionPerformed
        // TODO add your handling code here:
        BACKEND.DiceAndHandManager.countElements();
        if (BACKEND.BattleController.hasEnoughDice(BACKEND.BattleController.getActiveChar().getBurstCost(), BACKEND.BattleController.getActiveChar().getElementType())) {
            System.out.println("has enough dice for burst");
            BACKEND.BattleController.subtractDice(BACKEND.BattleController.getActiveChar().getBurstCost(), BACKEND.BattleController.getActiveChar().getElementType());
            BACKEND.BattleController.setEnemyHealth(BACKEND.BattleController.getActiveEnemy().getHealth() - (BACKEND.BattleController.getActiveChar().getBurstDmg()));
            enemyHPLab.setText("" + BACKEND.BattleController.getActiveEnemy().getHealth());

            BACKEND.DiceAndHandManager.sort();
            dice1But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(0)));
            dice2But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(1)));
            dice3But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(2)));
            dice4but.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(3)));
            dice5But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(4)));
            dice6But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(5)));
            dice7But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(6)));
            dice8But.setBackground(BACKEND.DiceAndHandManager.returnColour(BACKEND.DiceAndHandManager.getElement(7)));

            BACKEND.BattleController.doEnemyTurn();

            if (BACKEND.BattleController.isDead()) {
                String deadChar = BACKEND.BattleController.getEnemyTarget();
                if (char1But.getText().equals(deadChar)) {
                    char1But.setBackground(Color.black);
                    char1But.setEnabled(false);
                    char1HP.setText("X");
                } else if (char2But.getText().equals(deadChar)) {
                    char2But.setBackground(Color.black);
                    char1But.setEnabled(false);
                    char2HP.setText("X");
                } else {
                    char3But.setBackground(Color.black);
                    char3But.setEnabled(false);
                    char3HP.setText("X");
                }
                //no more attacks

                playSpecialCardBut.setVisible(false);
                physAtkBut.setVisible(false);
                skillAtkBut.setVisible(false);
                burstAtkBut.setVisible(false);
                endRoundBut.setVisible(false);

                //go to next screen
            } else if (BACKEND.BattleController.getActiveEnemy().getHealth() <= 0) {
                this.setVisible(false);
                VictoryScreen vs = new VictoryScreen();
                vs.setVisible(true);
            } else {
                BACKEND.StatsManager.incNumMoves();
                char1HP.setText("" + BACKEND.ViewingManager.returnCharacter(0).getHp());
                char2HP.setText("" + BACKEND.ViewingManager.returnCharacter(1).getHp());
                char3HP.setText("" + BACKEND.ViewingManager.returnCharacter(2).getHp());
                dmgDone.setText("" + BACKEND.BattleController.getEnemyDmg());
            }
        }

    }//GEN-LAST:event_burstAtkButActionPerformed

    private void dice4butActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dice4butActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dice4butActionPerformed

    private void dice1ButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dice1ButActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dice1ButActionPerformed

    private void dice2ButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dice2ButActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dice2ButActionPerformed

    private void dice3ButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dice3ButActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dice3ButActionPerformed

    private void dice8ButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dice8ButActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dice8ButActionPerformed

    private void dice7ButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dice7ButActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dice7ButActionPerformed

    private void dice6ButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dice6ButActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dice6ButActionPerformed

    private void dice5ButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dice5ButActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dice5ButActionPerformed

    private void forfeitGameButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forfeitGameButActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        LoseScreen ls = new LoseScreen();
        ls.setVisible(true);
    }//GEN-LAST:event_forfeitGameButActionPerformed

    private void card1RadBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card1RadBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_card1RadBActionPerformed

    private void char1ButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_char1ButActionPerformed
        // TODO add your handling code here:
        BACKEND.BattleController.setActiveChar(BACKEND.ViewingManager.returnCharacter(char1But.getText()));
        char1But.setBackground(new Color(109, 49, 89));
        char1HP.setBackground(new Color(109, 49, 89));

        char2But.setBackground(new Color(26, 23, 25));
        char2HP.setBackground(new Color(26, 23, 25));
        char3But.setBackground(new Color(26, 23, 25));
        char3HP.setBackground(new Color(26, 23, 25));

        physAtkBut.setVisible(true);
        physAtkBut.setText("Phys ATK : " + BACKEND.ViewingManager.returnCharacter(0).getPhysDmg());
        skillAtkBut.setVisible(true);
        skillAtkBut.setText("Skill ATK : " + BACKEND.ViewingManager.returnCharacter(0).getSkillDmg());
        burstAtkBut.setVisible(true);
        burstAtkBut.setText("Burst ATK : " + BACKEND.ViewingManager.returnCharacter(0).getBurstDmg());
    }//GEN-LAST:event_char1ButActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BattleScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BattleScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BattleScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BattleScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BattleScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton burstAtkBut;
    private javax.swing.JLabel burstDmgLab;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton card1RadB;
    private javax.swing.JRadioButton card2RadB;
    private javax.swing.JRadioButton card3RadB;
    private javax.swing.JButton char1But;
    private javax.swing.JLabel char1HP;
    private javax.swing.JButton char2But;
    private javax.swing.JLabel char2HP;
    private javax.swing.JButton char3But;
    private javax.swing.JLabel char3HP;
    private javax.swing.JButton dice1But;
    private javax.swing.JButton dice2But;
    private javax.swing.JButton dice3But;
    private javax.swing.JButton dice4but;
    private javax.swing.JButton dice5But;
    private javax.swing.JButton dice6But;
    private javax.swing.JButton dice7But;
    private javax.swing.JButton dice8But;
    private javax.swing.JLabel dmgDone;
    private javax.swing.JButton endRoundBut;
    private javax.swing.JLabel enemyHPLab;
    private javax.swing.JLabel enemyImageLabel;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JButton forfeitGameBut;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton physAtkBut;
    private javax.swing.JLabel physDmgLab;
    private javax.swing.JButton playSpecialCardBut;
    private javax.swing.JButton skillAtkBut;
    private javax.swing.JLabel skillDmgLab;
    private javax.swing.JProgressBar skillPtsBar;
    private javax.swing.JLabel turnLab;
    private javax.swing.JLabel usernameLab;
    // End of variables declaration//GEN-END:variables
}
